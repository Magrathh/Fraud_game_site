import React, { useEffect, useState } from 'react';
import { useParams, useNavigate, useLocation } from 'react-router-dom';
import { socket } from '../services/socketService';
import Navbar from '../components/common/Navbar';
import '../assets/css/LobbyPage.css';

const LobbyPage = () => {
  const { roomId } = useParams();
  const navigate = useNavigate();
  const location = useLocation();
  const [room, setRoom] = useState(null);
  const [countdown, setCountdown] = useState(null);
  const isCreator = location.state?.isCreator;

  useEffect(() => {
    // --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ ---
    const onUpdateRoom = (roomData) => setRoom(roomData);
    const onRoomDeleted = () => {
      alert('–í–ª–∞–¥–µ–ª–µ—Ü –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏–ª—Å—è. –ö–æ–º–Ω–∞—Ç–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.');
      navigate('/');
    };
    const onError = (errorMessage) => {
      alert(errorMessage);
      navigate('/');
    };
    const onTimerUpdate = (value) => setCountdown(value);
    const onGameStarting = () => {
      alert('–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∏–≥—Ä–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É...');
      navigate(`/game/${roomId}`);
    };

    socket.on('updateRoom', onUpdateRoom);
    socket.on('roomDeleted', onRoomDeleted);
    socket.on('error', onError);
    socket.on('timerUpdate', onTimerUpdate);
    socket.on('gameStarting', onGameStarting);

    // --- –õ–æ–≥–∏–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∫–æ–º–Ω–∞—Ç—É ---
    // –ï—Å–ª–∏ –º—ã —Å–æ–∑–¥–∞—Ç–µ–ª—å, –º—ã —É–∂–µ "–≤ –∫–æ–º–Ω–∞—Ç–µ", –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    if (isCreator) {
      socket.emit('getInitialRoomData', { roomId });
    } else {
      // –ï—Å–ª–∏ –º—ã –æ–±—ã—á–Ω—ã–π –∏–≥—Ä–æ–∫, –º—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.
      socket.emit('joinRoom', { roomId });
    }

    // --- –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
    return () => {
      // –í—Å–µ–≥–¥–∞ –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–ª—É—à–∞—Ç–µ–ª–µ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
      socket.off('updateRoom', onUpdateRoom);
      socket.off('roomDeleted', onRoomDeleted);
      socket.off('error', onError);
      socket.off('timerUpdate', onTimerUpdate);
      socket.off('gameStarting', onGameStarting);
    };
  }, [roomId, navigate, isCreator]);

  const handleLeaveRoom = () => {
    socket.emit('leaveRoom', { roomId });
    navigate('/');
  };
  
  if (!room) {
    return <div>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–Ω–∞—Ç—ã...</div>;
  }

  const playerSlots = new Array(16).fill(null);
  if (room.players) {
    room.players.forEach((player, index) => {
      if (index < 16) { playerSlots[index] = player; }
    });
  }

  return (
    <>
      <Navbar />
      <div className="lobby-container">
        <div className="lobby-header">
          <h1>–û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤</h1>
          <p>–ö–æ–º–Ω–∞—Ç–∞: {room.name}</p>
          {room.password && <div className="password-display">–ü–∞—Ä–æ–ª—å: <strong>{room.password}</strong></div>}
        </div>
        <div className="players-grid">
          {playerSlots.map((player, index) => (
            <div key={index} className={`player-slot ${player ? 'occupied' : ''}`}>
              {player ? (
                <>
                  <div className="player-avatar"></div>
                  <div className="player-name">{player.username}</div>
                  {room.ownerId === player.id && <span>(üëë)</span>}
                </>
              ) : (<span>–°–≤–æ–±–æ–¥–Ω–æ</span>)}
            </div>
          ))}
        </div>
        <div className="lobby-footer">
          <button className="leave-button" onClick={handleLeaveRoom}>–ü–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É</button>
          <div className="footer-info">
            {countdown !== null && (
                <div className="countdown-timer">
                    –°—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑: {countdown}—Å
                </div>
            )}
            <div className="player-count">
                –ò–≥—Ä–æ–∫–∏: {room.players.length} / 16
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default LobbyPage;